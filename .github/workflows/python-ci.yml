name: Flask App CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies and Run Unit Tests
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          echo "Running unit tests"
          pytest test/test_unit.py

      - name: Upload Gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
        if: always()

  trufflehog_secrets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          trufflehog filesystem . > trufflehog-report.json

      - name: Upload TruffleHog Report
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-report
          path: trufflehog-report.json
        if: always()

  semgrep_sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run Semgrep
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install semgrep
          echo "Running Semgrep SAST"
          semgrep scan --config auto . > semgrep-report.json

      - name: Upload Semgrep Report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.json
        if: always()

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run Flake8 Linter
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install flake8
          flake8 test --output-file=flake8-report.json

      - name: Upload Flake8 Report
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8-report.json
        if: always()

  integration_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run Integration Tests
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pip install pytest
          echo "Running integration tests"
          pytest myapp/test_integration.py > integration-tests-report.json

      - name: Upload Integration Test Report
        uses: actions/upload-artifact@v4
        with:
          name: integration-tests-report
          path: integration-tests-report.json
        if: always()

  e2e_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run E2E Tests
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pip install pytest
          echo "Running E2E tests"
          pytest myapp/test_e2e.py > e2e-tests-report.json

      - name: Upload E2E Test Report
        uses: actions/upload-artifact@v4
        with:
          name: e2e-tests-report
          path: e2e-tests-report.json
        if: always()

  containerize:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: docker build -t flask-starter-app .

  trivy_scan:
    runs-on: ubuntu-latest
    needs: containerize
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Trivy
        run: |
          TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          wget https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
          tar zxvf trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      - name: Run Trivy Scan and Save Report
        run: |
          echo "Running Trivy scan on flask-starter-app..."
          trivy image flask-starter-app --severity HIGH,CRITICAL --no-progress -f json -o trivy-report.json

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
        if: always()

  generate_dashboard:
    runs-on: ubuntu-latest
    needs: [unit_tests, trufflehog_secrets, semgrep_sast, lint, integration_tests, e2e_tests, containerize, trivy_scan]
    steps:
      - uses: actions/checkout@v3

      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          name: trufflehog-report
      - name: Download TruffleHog Report
        uses: actions/download-artifact@v4
        with:
          name: trivy-report
      - name: Download Flake8 Report
        uses: actions/download-artifact@v4
        with:
          name: flake8-report
      - name: Download Integration Test Report
        uses: actions/download-artifact@v4
        with:
          name: integration-tests-report
      - name: Download E2E Test Report
        uses: actions/download-artifact@v4
        with:
          name: e2e-tests-report

      - name: Generate Summary Dashboard
        run: |
          echo "### Scan Reports" > dashboard.md
          echo "#### TruffleHog Report" >> dashboard.md
          cat trufflehog-report.json >> dashboard.md
          echo "#### Trivy Report" >> dashboard.md
          cat trivy-report.json >> dashboard.md
          echo "#### Flake8 Report" >> dashboard.md
          cat flake8-report.json >> dashboard.md
          echo "#### Integration Test Report" >> dashboard.md
          cat integration-tests-report.json >> dashboard.md
          echo "#### E2E Test Report" >> dashboard.md
          cat e2e-tests-report.json >> dashboard.md

      - name: Upload Dashboard as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-report
          path: dashboard.md
