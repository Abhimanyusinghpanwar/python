name: Flask App CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies and Run Unit Tests
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt pytest
          echo "Running unit tests"
          pytest test/test_unit.py

  lint_and_coverage:
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run Flake8, Pylint, and Coverage
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install flake8 pylint coverage pytest
          pip install -r requirements.txt
          flake8 myapp > flake8-report.txt || true
          pylint myapp > pylint-report.txt || true
          coverage run -m pytest
          coverage report
          coverage html

      - name: Upload Lint & Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: lint-coverage-report
          path: |
            flake8-report.txt
            pylint-report.txt
            htmlcov/

  trufflehog_secrets:
    runs-on: ubuntu-latest
    needs: lint_and_coverage
    steps:
      - uses: actions/checkout@v3

      - name: Run TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          trufflehog filesystem . > trufflehog-report.txt || true

      - uses: actions/upload-artifact@v4
        with:
          name: trufflehog-report
          path: trufflehog-report.txt

  gitleaks:
    runs-on: ubuntu-latest
    needs: trufflehog_secrets
    steps:
      - uses: actions/checkout@v3

      - name: Install and Run Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o gitleaks
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/
          gitleaks detect --source=. --report-format=json --report-path=gitleaks-report.json || true

      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  integration_tests:
    runs-on: ubuntu-latest
    needs: gitleaks
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run Integration Tests
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt pytest
          pytest myapp/test_integration.py

  e2e_tests:
    runs-on: ubuntu-latest
    needs: integration_tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run E2E Tests
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt pytest
          pytest myapp/test_e2e.py

  semgrep_sast:
    runs-on: ubuntu-latest
    needs: e2e_tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run Semgrep
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install semgrep
          semgrep scan --config auto . > semgrep-report.txt || true

      - uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.txt

  containerize:
    runs-on: ubuntu-latest
    needs: semgrep_sast
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker build -t flask-starter-app:latest .
          docker images

  trivy_scan:
    runs-on: ubuntu-latest
    needs: containerize
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Rebuild Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: flask-starter-app:latest
          load: true
          push: false

      - name: Install Trivy
        run: |
          sudo apt update
          sudo apt install wget -y
          TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          wget https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
          tar zxvf trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      - name: Run Trivy Scan
        run: |
          trivy image flask-starter-app:latest --severity HIGH,CRITICAL --no-progress -f json -o trivy-report.json || echo "Trivy scan failed"

      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
